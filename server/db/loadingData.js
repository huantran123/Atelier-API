const pool = require('./schema.js')

const setNewSequenceVal = (name) => {
  var tableName = name + 's';
  var seqName = name + '_seq';
  return pool.query(`SELECT count(*) FROM ${tableName};`)
    .then((res) => {
      console.log(`Count of ${tableName} table: ${res.rows[0].count}`)
      return pool.query(`SELECT setval('${seqName}', '${res.rows[0].count}');`)
    })
    .catch(err => console.error('setNewSequenceVal error: ', err.stack));
}

console.log('Start loading data!')
pool
  .query(`COPY reviews(id, product_id, rating, date, summary, body, recommended, reported, reviewer_name, reviewer_email, response, helpfulness) FROM '/Users/huantran/documents/Hack_Reactor/review-csv/reviews.csv' DELIMITER ',' NULL AS 'null' CSV HEADER;`)
  .then((res) => {
    console.log(`Reviews data successfully loaded to reviews table with ${res.rowCount} rows`);
    // Update new start value for review sequence
    setNewSequenceVal('review');
  })
  .then(() => {
    console.log('Review sequence successfully updated');
    // Convert date from unix time to ISO time
    return pool.query(`ALTER TABLE reviews ALTER COLUMN date SET DATA TYPE TIMESTAMP WITH TIME ZONE USING to_timestamp(date/1000);`)
  })
  .then(() => {
    console.log('Date comlumn successfully converted');
    // Copy data from reviews_photos.csv to photos table
    return pool.query(`COPY photos(id, review_id, url) FROM '/Users/huantran/documents/Hack_Reactor/review-csv/reviews_photos.csv' DELIMITER ',' CSV HEADER;`)
  })
  .then((res) => {
    console.log(`Photos data successfully loaded to photos table  with ${res.rowCount} rows`);
    // Update new start value for photos sequence
    setNewSequenceVal('photo');
  })
  .then(() => {
    console.log('Photo sequence successfully updated');
    // Create temporaty table for characteristics data
    return pool.query(`CREATE TABLE IF NOT EXISTS temp_char_1 (
      id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
      product_id BIGINT NOT NULL,
      type VARCHAR(20));`)
  })
  .then(() => {
    console.log('temp_char_1 table successfully created')
    // Copy data from characteristics.csv to temp_char_1 table
    return pool.query(`COPY temp_char_1(id, product_id, type) FROM '/Users/huantran/documents/Hack_Reactor/review-csv/characteristics.csv' DELIMITER ',' CSV HEADER;`)
  })
  .then((res) => {
    console.log(`Charateristics data successfully loaded to temp_char_1 table  with ${res.rowCount} rows`);
    // Create temporaty table for characteristic_reviews data
    return pool.query(`CREATE TABLE IF NOT EXISTS temp_char_2 (
      id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
      char_id BIGINT NOT NULL,
      value INT NOT NULL,
      review_id BIGINT NOT NULL,
      CONSTRAINT fk_review
        FOREIGN KEY (review_id)
          REFERENCES reviews(id));`)
  })
  .then(() => {
    console.log('temp_char_2 table successfully created')
    // Copy data from characteristic_reviews.csv to temp_char_2 table
    return pool.query(`COPY temp_char_2(id, char_id, review_id, value) FROM '/Users/huantran/documents/Hack_Reactor/review-csv/characteristic_reviews.csv' DELIMITER ',' CSV HEADER;`)
  })
  .then((res) => {
    console.log(`Charateristic reviews data successfully loaded to temp_char_2 table with ${res.rowCount} rows`);
    // Join temp_char_1 and temp_char_2 together and insert data to characteristics table
    return pool.query(`INSERT INTO "characteristics" SELECT temp_char_2.id, type, value, review_id, product_id FROM temp_char_2 LEFT JOIN temp_char_1 ON temp_char_1.id = char_id;
    `)
  })
  .then((res) => {
    console.log(`Characteristics data successfully joined and loaded to characteristics table with ${res.rowCount} rows`);
    // Update new start value for characteristic sequence
    setNewSequenceVal('characteristic');
  })
  .then(() => {
    console.log('Characteristic sequence successfully updated');
    // Drop temp_char_1 table
    return pool.query(`DROP TABLE temp_char_1`);
  })
  .then(() => {
    console.log('temp_char_1 table successfully dropped');
    // Drop temp_char_2 table
    return pool.query(`DROP TABLE temp_char_2`);
  })
  .then(() => {
    console.log('temp_char_2 table successfully dropped');
    console.log('Loadding process done!!!')
  })
  .catch(err => {
    console.log(err.message)
  })