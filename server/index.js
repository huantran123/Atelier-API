const {Pool} = require('pg');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  user: 'huantran',
  database: 'sdc',
  password: ''
});

const setNewSequenceVal = (name) => {
  var tableName = name + 's';
  var seqName = name + '_seq';
  return pool.query(`SELECT count(*) FROM ${tableName};`)
    .then((res) => {
      console.log(`Count of ${tableName} table: ${res.rows[0].count}`)
      return pool.query(`SELECT setval('${seqName}', '${res.rows[0].count}');`)
    })
    .catch(err => console.error('setNewSequenceVal error: ', err.stack));
}

// Create reviews table
pool
  .query(`CREATE TABLE IF NOT EXISTS reviews (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    summary VARCHAR(255),
    body TEXT NOT NULL,
    rating INT NOT NULL,
    date VARCHAR(20) NOT NULL,
    reviewer_name VARCHAR(100) NOT NULL,
    reviewer_email VARCHAR(150) NOT NULL,
    recommended BOOLEAN NOT NULL,
    helpfulness INT NOT NULL DEFAULT 0,
    reported BOOLEAN NOT NULL DEFAULT false,
    response TEXT,
    product_id BIGINT NOT NULL);`)
  .then(() => {
    console.log('reviews table successfully created')
    // Create review sequence
    return pool.query(`CREATE SEQUENCE IF NOT EXISTS review_seq START 1 INCREMENT 1 OWNED BY reviews.id`)
  })
  .then(() => {
    console.log('review sequence successfully created')
    // Create responses tables
    return pool.query(`CREATE TABLE IF NOT EXISTS responses (
      id BIGSERIAL PRIMARY KEY NOT NULL,
      body TEXT NOT NULL,
      review_id BIGINT NOT NULL,
      CONSTRAINT fk_review
        FOREIGN KEY (review_id)
          REFERENCES reviews(id));`)
  })
  .then(() => {
    console.log('responses table successfully created')
    // Create photos table
    return pool.query(`CREATE TABLE IF NOT EXISTS photos (
      id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
      url VARCHAR(255),
      review_id BIGINT NOT NULL,
      CONSTRAINT fk_review
        FOREIGN KEY (review_id)
          REFERENCES reviews(id));`)
  })
  .then(() => {
    console.log('photos table successfully created')
    // Create photo sequence
    return pool.query(`CREATE SEQUENCE IF NOT EXISTS photo_seq START 1 INCREMENT 1 OWNED BY photos.id`)
  })
  .then(() => {
    console.log('photo sequence successfully created')
    // Create characteristics table
    return pool.query(`CREATE TABLE IF NOT EXISTS characteristics (
      id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
      type VARCHAR(100),
      value INT NOT NULL,
      review_id BIGINT NOT NULL,
      product_id BIGINT NOT NULL,
      CONSTRAINT fk_review
        FOREIGN KEY (review_id)
          REFERENCES reviews(id));`)
  })
  .then(() => {
    console.log('characteristics table successfully created')
    // Create characteristic sequence
    return pool.query(`CREATE SEQUENCE IF NOT EXISTS characteristic_seq START 1 INCREMENT 1 OWNED BY characteristics.id`)
  })
  .then(() => {
    console.log('characteristic sequence successfully created')
    // Create temporaty table for characteristics data
    return pool.query(`CREATE TABLE IF NOT EXISTS temp_char_1 (
      id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
      product_id BIGINT NOT NULL,
      type VARCHAR(20));`)
  })
  .then(() => {
    console.log('temp_char_1 table successfully created')
    // Create temporaty table for characteristic_reviews data
    return pool.query(`CREATE TABLE IF NOT EXISTS temp_char_2 (
      id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
      char_id BIGINT NOT NULL,
      value INT NOT NULL,
      review_id BIGINT NOT NULL,
      CONSTRAINT fk_review
        FOREIGN KEY (review_id)
          REFERENCES reviews(id));`)
  })
  .then(() => {
    console.log('temp_char_2 table successfully created')
    // Copy data from reviews.csv to reviews table
    return pool.query(`COPY reviews(id, product_id, rating, date, summary, body, recommended, reported, reviewer_name, reviewer_email, response, helpfulness) FROM '/Users/huantran/documents/Hack_Reactor/review-csv/reviews.csv' DELIMITER ',' NULL AS 'null' CSV HEADER;`)
  })
  .then(() => {
    console.log('Reviews data successfully loaded to reviews table');
    // Update new start value for review sequence
    setNewSequenceVal('review');
  })
  .then(() => {
    console.log('Review sequence successfully updated');
    // Insert response and review id from reviews table to responses table
    return pool.query(`INSERT INTO responses(body, review_id) SELECT response, id from reviews where response IS NOT NULL;`)
  })
  .then(() => {
    console.log('Responses data successfully loaded to responses table');
    // Remove response column from reviews table after loading all respons data to response table
    return pool.query(`ALTER TABLE reviews DROP COLUMN response`);
  })
  .then(() => {
    console.log('Response column in reviews table successfully dropped');
    // Copy data from reviews_photos.csv to photos table
    return pool.query(`COPY photos(id, review_id, url) FROM '/Users/huantran/documents/Hack_Reactor/review-csv/reviews_photos.csv' DELIMITER ',' CSV HEADER;`)
  })
  .then(() => {
    console.log('Photos data successfully loaded to photos table');
    // Update new start value for photos sequence
    setNewSequenceVal('photo');
  })
  .then(() => {
    console.log('Photo sequence successfully updated');
    // Copy data from characteristics.csv to temp_char_1 table
    pool.query(`COPY temp_char_1(id, product_id, type) FROM '/Users/huantran/documents/Hack_Reactor/review-csv/characteristics.csv' DELIMITER ',' CSV HEADER;`)
  })
  .then(() => {
    console.log('Charateristics data successfully loaded to temp_char_1 table');
    // Copy data from characteristic_reviews.csv to temp_char_2 table
    return pool.query(`COPY temp_char_2(id, char_id, review_id, value) FROM '/Users/huantran/documents/Hack_Reactor/review-csv/characteristic_reviews.csv' DELIMITER ',' CSV HEADER;`)
  })
  .then(() => {
    console.log('Charateristic reviews data successfully loaded to temp_char_2 table');
    // Join temp_char_1 and temp_char_2 together and insert data to characteristics table
    return pool.query(`INSERT INTO "characteristics" SELECT temp_char_2.id, type, value, review_id, product_id from temp_char_2 JOIN temp_char_1 on temp_char_1.id = char_id;
    `)
  })
  .then(() => {
    console.log('Characteristics data successfully joined and loaded to characteristics table');
    // Update new start value for characteristic sequence
    setNewSequenceVal('characteristic');
  })
  .then(() => {
    console.log('Characteristic sequence successfully updated');
    // Drop temp_char_1 table
    return pool.query(`DROP TABLE temp_char_1`);
  })
  .then(() => {
    console.log('temp_char_1 table successfully dropped');
    // Drop temp_char_2 table
    return pool.query(`DROP TABLE temp_char_2`);
  })
  .then(() => {
    console.log('temp_char_2 table successfully dropped');
    console.log('Loadding process done!!!')
  })
  .catch(err => {
    console.log(err.message)
  })